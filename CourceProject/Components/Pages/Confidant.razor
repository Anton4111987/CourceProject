@using CourceProject.Components.Data
@using CourceProject.Components.Models
@using CourceProject.Components.Services
@inject IUserRepository _listUsers
@inject IConfidantRepository _listConfidants
@inject Blazored.SessionStorage.ISessionStorageService localStorage;
@inject NavigationManager navigationManager;
@inject IToastService toastService
@inject ILogger<Confidant> logger
@page "/Confidant"

@rendermode InteractiveServer

<p> Список доверенных лиц </p>
@if (isConnected)
{
    if (@_userId == 0)
    {
        toastService.ShowError("Пожалуйста авторизуйтесь!");
        navigationManager.NavigateTo("/Authorization");
    }
    else
    {
        <p>@_pageTitle - "@_nameUser"</p>
        <p>userId - "@_userId" </p>
        <h1>Список доверенных лиц</h1>
        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
            <button class="btn btn-1" @onclick="(()=>ChangePasswordUser((int)_userId))"> Изменить пароль пользователя </button>

        </div>
        <br />
        <button class="btn btn-3" id="exit" @onclick="Exit">Выйти</button>
        <br />
        <table class="table">
            <thead>
                <tr>
                    <th>Фамилия</th>
                    <th>Имя</th>
                    <th>Отчество</th>
                    <th>Email адрес</th>
                    <th>Номер телефона</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Confidant confidant in confidants)
                {
                    <tr>
                        <td>
                            @confidant.
                        </td>
                        <td>@account.Login</td>
                        @if (flag && accountId == account.Id)
                        {
                            @if (account.Password.Length > 16)
                            {
                                <td>@passwordEncryptor.Decrypt(account.Password);</td>
                            }
                            else
                            {
                                <td>@account.Password;</td>
                            }
                        }
                        else
                        {
                            <td>@xxx</td>
                        }
                        <td>
                            <button class="btn btn-primary" id="show" @onclick="(()=>ShowPassword(account))">Показать</button>
                        </td>
                        <td>
                            <button class="btn btn-primary" id="change" @onclick="(()=>Change(account,selectedNumber))">Сгенерировать новый пароль</button>
                        </td>
                        <td>
                            <select @bind="selectedNumber">
                                @for (int i = 6; i < 16; i++)
                                {
                                    <option> @i</option>
                                }
                            </select>
                        </td>
                        <td>
                            <Button Color="Color.Danger" class="btn btn-2" id="delete" @onclick="(()=>DeleteConfidant(confidant))">Удалить</Button>
                        </td>
                    </tr>
                }
                <tr>
                    <td>
                        <InputText @bind-Value=@_newAccount.Source />
                    </td>
                    <td>
                        <InputText @bind-Value=@_newAccount.Login />
                    </td>
                    <td>
                        <InputText @bind-Value=@_newAccount.Password />
                    </td>
                    <td></td>
                    <td>
                        <button class="btn btn-primary" id="generate" @onclick="(()=>Generate(_newAccount,selectedNumber))">Сгенерировать пароль</button>
                    </td>
                    <td>
                        <select @bind="selectedNumber">
                            @for (int i = 6; i < 16; i++)
                            {
                                <option> @i</option>
                            }
                        </select>
                    </td>
                </tr>
            </tbody>
        </table>
        <br />
        <br />
        <button class="btn btn-primary" id="add" @onclick="AddConfidant">Добавить новый аккаунт</button>
    }
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    private string _pageTitle = "Вы вошли под пользователем ";
    private int? _userId;
    private string? _nameUser;
    private IEnumerable<Confidant> confidants = new List<Confidant>();
    private Confidant _newConfidant = new();
    private bool flag = false;
    private string? xxx = "*******";
    private int selectedNumber;
    private bool isConnected;
    private bool checkedValue;
    protected override async void OnInitialized()
    {
        confidants = await _listConfidants.GetConfidants();
        confidants = confidants.Where(c => c.UserId == _userId);
    }

    private async void Change(Confidant confidant, int selectedNumber)
    {
        await _listConfidants.UpdateConfidant(confidant);
        logger.LogInformation("Обновлены данные доверенного лица {" + confidant.Name + " " + confidant.Surname + " " + confidant.LastName "}");
        toastService.ShowInfo("Обновлены данные доверенного лица {" + confidant.Name + " " + confidant.Surname + " " + confidant.LastName "}");
    }
    private async Task ReadLocalStorage()
    {
        _nameUser = await localStorage.GetItemAsync<string>("userName");
        _userId = await localStorage.GetItemAsync<int>("userId");
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            await ReadLocalStorage();
            StateHasChanged();
        }
    }
    private void Generate(Account _newAccount, int selectedNumber)
    {
        if (selectedNumber == 0)
            selectedNumber = 8;
        _newAccount.Password = GeneratePassword.Generate(selectedNumber);
    }
    private async void AddConfidant()
    {
        if (_newAccount.Source != null && _newAccount.Login != null && _newAccount.Password != null && _newAccount.Password.Length > 5)
        {
            _newAccount = new()
                {
                    Source = _newAccount.Source,
                    Login = _newAccount.Login,
                    Password = passwordEncryptor.Encrypt(_newAccount.Password),
                    UserId = _userId
                };
            await _listConfidants.AddConfidant(_newConfidant);
            logger.LogInformation("Добавлен новый аккаунт {" + _newAccount.Source + "}");
            _newAccount = new();
            navigationManager.NavigateTo("/PasswordManager", true);
        }
        else
            toastService.ShowError("Не все поля заполнены корректно, также проверьте чтобы пароль содержал не менее 6 символов");
    }
    private void DeleteConfidant(Confidant confidant)
    {
        _listConfidants.Delete(confidant);
        logger.LogInformation("Удалено доверенное лицо {" + confidant.N + "}");
        navigationManager.NavigateTo("/PasswordManager", true);
    }
    private async void Exit()
    {
        navigationManager.NavigateTo("/Authorization");
        logger.LogInformation("Выход пользователя {" + _nameUser + "} из приложения!");
        await localStorage.ClearAsync();
        logger.LogInformation("Очистка sessionStorage!");
        toastService.ShowInfo("Смена пользователя");
    }
    private void ChangePasswordUser(int _userId)
    {
        logger.LogInformation("Переход на страницу для смены пароля пользователя {" + _nameUser + "}");
        toastService.ShowInfo("Вы перенаправлены на страницу изменения пароля");
        navigationManager.NavigateTo("/ChangePassword");
    }
}
