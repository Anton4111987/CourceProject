@using CourceProject.Components.Data
@using CourceProject.Components.Models
@using CourceProject.Components.Services
@using BlazorBootstrap;

@inject IUserRepository _listUsers
@inject IAccountRepository _listAccounts
@inject Blazored.SessionStorage.ISessionStorageService localStorage
@inject NavigationManager navigationManager
@inject IEncryptor passwordEncryptor
@inject IToastService toastService
@inject ILogger<PasswordManager> logger;
@page "/PasswordManager"

@rendermode InteractiveServer

@if (isConnected)
{
    if (@_userId == 0)
    {
        toastService.ShowError("Пожалуйста авторизуйтесь!");
        navigationManager.NavigateTo("/Authorization");
    }
    else
    {
        <div class="userId" style="color:white; width:350px; background:#42AAFF">
            <span> Вы вошли под пользователем - "@_nameUser"</span>
            
            <span> userId - "@_userId" </span>
        </div>
        <button style="background:black; float:inline-end;" class="glow-on-hover" id="exit" @onclick="Exit">Выйти</button>
        <br />
        <h1 style="color:blueviolet; font-style:oblique" align="center">Менеджер паролей</h1>
        <br />
        <div>
            <InputText style="background:#A5A5A5; height:35px; width:300px;" class="glow-on-hover" @bind-Value=@searchName placeholder="поиск по наименованию" />
            <button style="background:#18db66; height:35px" class="glow-on-hover" @onclick="(()=>Search(searchName))">Найти</button>
        </div>
        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
            <button style="background:#18db66; width:500px; font-size:20px" class="glow-on-hover" @onclick="(()=>ChangePasswordUser((int)_userId!))"> Изменить пароль пользователя "@_nameUser" </button>
        </div>
        <h2 style="color:blueviolet; font-style:oblique">Список аккаунтов:</h2>
        <table class="table_dark">
            <thead>
                <tr>
                    <th>Ресурс</th>
                    <th>Логин</th>
                    <th>Пароль</th>
                    <th>Кнопка пароля</th>
                    <th>Смена пароля рандомно</th>
                    <th>Длина смены пароля</th>
                    <th>Удаление</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Account account in accounts)
                {
                    <tr>
                        <td>
                            @account.Source
                        </td>
                        <td>@account.Login</td>
                        @if (flag && accountId == account.Id)
                        {
                            <td>@passwordEncryptor.Decrypt(account.Password)</td>
                            <td>
                                <button style="background:#1b6ec2" class="glow-on-hover" id="show" @onclick="(()=>ShowPassword(account))">Скрыть пароль</button>
                            </td>
                        }
                        else
                        {
                            <td>@xxx</td>
                            <td>
                                <button style="background:#1b6ec2" class="glow-on-hover" id="show" @onclick="(()=>ShowPassword(account))">Показать пароль</button>
                            </td>
                        }
                        <td>
                            <button style="background:#1b6ec2; height:60px" class="glow-on-hover" id="change" @onclick="(()=>Change(account,selectedNumber))">Генерация нового пароля</button>
                        </td>
                        <td>
                            <select @bind="selectedNumber" placeholder="6">
                                @for (int i = 6; i < 16; i++)
                                {
                                    <option value="@account.Id"> @i</option>
                                }
                            </select>
                        </td>
                        <td>
                            <button style="background:red" class="glow-on-hover" id="delete" @onclick="(()=>OnShowModalClick(account))">Удалить</button>

                        </td>
                    </tr>
                }
                <tr>
                    <td>
                        <InputText @bind-Value=@_newAccount.Source placeholder="введите новый ресурс " />
                    </td>
                    <td>
                        <InputText @bind-Value=@_newAccount.Login placeholder="введите логин" />
                    </td>
                    <td>
                        <InputText @bind-Value=@_newAccount.Password placeholder="введите пароль" />
                    </td>
                    <td></td>
                    <td>
                        <button style="background:#1b6ec2" class="glow-on-hover" @onclick="(()=>Generate(_newAccount,selectedNumberNewPass))">Сгенерировать пароль</button>
                    </td>
                    <td>
                        <select @bind="selectedNumberNewPass" placeholder="6">
                            @for (int i = 6; i < 16; i++)
                            {

                                <option> @i</option>
                            }
                        </select>
                    </td>
                </tr>
            </tbody>
        </table>
        <br />
        <br />
        <div>
            <button style="background:blue" class="glow-on-hover" id="add" @onclick="AddAccount">Добавить новый аккаунт</button>
        </div>
    }
    <Modal @ref="modalWindowDeleteAccount" Title="Подтверждения удаления аккаунта!">
        <BodyTemplate>
            Вы точно хотите удалить аккаунт <b>"@delAccount.Source"</b>?
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Primary" @onclick="OnHideModalClick">Отмена</Button>
            <Button Color="ButtonColor.Dark" @onclick="(()=>DeleteAccount(delAccount))">Удалить</Button>
        </FooterTemplate>
    </Modal>
    <Modal @ref="modal1"></Modal>
}
else
{
    <p><em>Loading...</em></p>
}


@code {
    private int? _userId;
    private string? _nameUser;
    private IEnumerable<Account> accounts = new List<Account>();
    private Account _newAccount = new();
    private int? accountId;
    private bool flag=false;
    private string? searchName;
    private string? xxx="*******";
    private int selectedNumber;
    private int selectedNumberNewPass;
    private bool isConnected;
    private bool checkedValue;
    private List<Account> arrAccountsDelete = new List<Account>();
    private Account delAccount=new();
    private Modal modalWindowDeleteAccount=default!;
    private Modal modal1 = default!;
    [Inject] ModalService ModalService { get; set; } = default!;

    protected override async void OnInitialized()
    {
        accounts = await _listAccounts.GetAccounts();
        accounts = accounts.Where(a => a.UserId == _userId); // показать все аакаунты которые принадлежат данному пользователю
        accounts = accounts.OrderBy(a => a.Source); // сортировка по алфавиту
    }
    private void ShowPassword(Account account) // метод показа пароля
    {
        flag = !flag;
        accountId = account.Id;
    }
    #region метод изменения пароля
    private async void Change(Account account, int selectedNumber) // метод изменения пароля
    {
        flag = false;
        Generate(account, selectedNumber);
        account.Password = passwordEncryptor.Encrypt(account.Password);
        ShowPassword(account);
        await _listAccounts.UpdateAccount(account);
        logger.LogInformation("Обновлены данные пароля аккаунта {" + account.Source + "} пользователя {" + _nameUser+"}");
        toastService.ShowInfo("Обновлены данные пароля аккаунта {" + account.Source + "} пользователя {" + _nameUser+"}");
    }
    #endregion
    private async Task ReadLocalStorage()
    {
        _nameUser = await localStorage.GetItemAsync<string>("userName");
        _userId = await localStorage.GetItemAsync<int>("userId");
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            isConnected = true;
            await ReadLocalStorage();
            StateHasChanged();
        }
    }
    private void  Generate(Account _newAccount, int selectedNumberNewPass)
    {       
        if (selectedNumberNewPass == 0)
            selectedNumberNewPass = 8;
        _newAccount.Password = GeneratePassword.Generate(selectedNumberNewPass); // шифрование введенного пароля
    }
    #region метод добавления нового аккаунта
    private async void AddAccount() // метод добавления нового аккаунта
    {        
        if (_newAccount.Source != null && _newAccount.Login != null && _newAccount.Password != null && _newAccount.Password.Length>5)
        {
            _newAccount = new()
                {
                    Source = _newAccount.Source,
                    Login = _newAccount.Login,
                    Password = passwordEncryptor.Encrypt(_newAccount.Password),
                    UserId = _userId
                };
            await _listAccounts.AddAccount(_newAccount);
            logger.LogInformation("Добавлен новый аккаунт {" + _newAccount.Source+"}");
            _newAccount = new();
            navigationManager.NavigateTo("/PasswordManager", true);
        }
        else
            toastService.ShowError("Не все поля заполнены корректно, также проверьте чтобы пароль содержал не менее 6 символов");
    }
    #endregion

    #region метод удаления аккаунта
    private void DeleteAccount(Account account) // метод удаления аккаунта
    {
        _listAccounts.Delete(account);      
        logger.LogInformation("Удален аккаунт {" + account.Source + "пользователя с ID = " + @_userId +  "}");
        navigationManager.NavigateTo("/PasswordManager", true);
    }
    #endregion

    private async void Exit()
    {
        navigationManager.NavigateTo("/Authorization");
        logger.LogInformation("Выход пользователя {" + _nameUser + "} из приложения!");
        await localStorage.ClearAsync();
        logger.LogInformation("Очистка sessionStorage!");
        toastService.ShowInfo("Смена пользователя");
    }

    private void ChangePasswordUser(int _userId)
    {
        logger.LogInformation("Переход на страницу для смены пароля пользователя {" + _nameUser+"}");
        toastService.ShowInfo("Вы перенаправлены на страницу изменения пароля");
        navigationManager.NavigateTo("/ChangePassword");
    }

    private async Task OnShowModalClick(Account account)
    {
        await modalWindowDeleteAccount.ShowAsync();
        delAccount = account;
    }

    private async Task OnHideModalClick()
    {
        await modalWindowDeleteAccount.HideAsync();
    }
    #region метод поиска аккаунта
    private void Search(string? searchName)
    {
        if (searchName == null || searchName == "")
        {
            accounts = accounts.Where(a => a.UserId == _userId);
        }
        else
        {
            accounts = accounts.Where(r => r.Source!.Contains(searchName));
        }
    }
   #endregion
}
