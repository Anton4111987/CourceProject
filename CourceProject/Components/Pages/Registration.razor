@using CourceProject.Components.Data
@using CourceProject.Components.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using CourceProject.Components.Services
@inject IUserRepository _listUsers
@inject NavigationManager navigationManager
@inject IEncryptor passwordEncryptor
@inject Blazored.SessionStorage.ISessionStorageService localStorage
@inject ILogger<Registration> logger
@inject IToastService toastService
@page "/Registration"

@rendermode InteractiveServer

<h3>@_pageTitle</h3>

<EditForm Model="@_user" OnValidSubmit="AddUser" FormName="user_registration" >
    <DataAnnotationsValidator />
    <br />
    Имя пользователя: <InputText id="name" @bind-Value="@_user.Name" />
    <br />
    <br />
    Фамилия пользователя: <InputText id="lastname" @bind-Value="@_user.LastName" />
    <br />
    <br />
    Email пользователя: <InputText id="email" @bind-Value="@_user.Email" />
    <br />
    <br />
    Пароль пользователя: <InputText type="password" id="password" @bind-Value="@_user.Password" />
    <br />
    <br />
    Повторите Пароль: <InputText type="password" id="repeat_password" @bind-Value="@repeatPassword.Password" />
    <br />
    <ValidationSummary />
    <br />
    <br /> <input type="submit" value="Добавить пользователя">
    <br />
</EditForm> 

@code {
    private string _pageTitle = "Регистрация нового пользователя и добавление в базу";
    string? encryptedPassword;
    private int? userId;
    private string? userName;
    private IEnumerable<User> users = new List<User>();
    [SupplyParameterFromForm]
    private User _user { get; set; } = new();
    [SupplyParameterFromForm]
    private RepeatPassword repeatPassword { get; set; } = new();

    private async Task AddUser()
    {
        if (!SearchUser())
        {
            if (_user.Password != repeatPassword.Password)
            {
                toastService.ShowError("Пароли не совпадают");
            }
            else
            {
                await _listUsers.AddUser(
                new User
                    {
                        Name = _user.Name,
                        LastName = _user.LastName,
                        Email = _user.Email,
                        Password = passwordEncryptor.Encrypt(_user.Password)
                    });
                logger.LogInformation("Зарегистрирован новый пользователь {" + _user.Name+"}");
                toastService.ShowSuccess("Новый пользователь " + _user.Name + " успешно зарегистрирован");
                var users = await _listUsers.GetUsers();
                _user = users.LastOrDefault();
                userId = _user.Id;
                userName = _user.Name;
                _user = new();
                await SaveLocalStorage();
                navigationManager.NavigateTo("/PasswordManager");
            }
        }
        else
        {
            toastService.ShowError("Пользователь с таким именем уже зарегистрирован в системе");
        }
    }
    private async Task SaveLocalStorage()
    {
        await localStorage.SetItemAsync("userId", userId);
        await localStorage.SetItemAsync("userName", userName);
        logger.LogInformation("Сохранение имени и Id пользователя {" + userName+ "} в sessionStorage");
    }
    private bool SearchUser()
    {
        bool flag= false;
        foreach (User user in users)
        {           
            if (user.Name == _user.Name)
            {   
                _user.Name = " ";
                flag = true;
            }
        }
        return flag;
    }
    protected override async void OnInitialized()
    {
        users = await _listUsers.GetUsers();
    }
}
