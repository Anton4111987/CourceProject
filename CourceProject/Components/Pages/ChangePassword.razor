@using CourceProject.Components.Data
@using CourceProject.Components.Models
@using CourceProject.Components.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IUserRepository _listUsers
@inject Blazored.SessionStorage.ISessionStorageService localStorage;
@inject NavigationManager navigationManager
@inject IEncryptor passwordEncryptor
@inject IToastService toastService
@inject ILogger<ChangePassword> logger

@page "/ChangePassword"
@rendermode InteractiveServer

<h3>Изменение пароля</h3>

@if (isConnected)
{
    <EditForm Model="@changeUserPassword" OnValidSubmit="Change" FormName="user_changePassword">
    <DataAnnotationsValidator />
    <br />
        Введите текущий пароль: <InputText type="password" @bind-Value="changeUserPassword!.CurrentPassword" />
    <br />
    <br />
        Введите новый пароль: <InputText type="password" @bind-Value="changeUserPassword.NewPassword" />
    <br />
    <br />
        Повторите новый пароль: <InputText type="password" @bind-Value="changeUserPassword.NewPasswordRepeat" />
    <br />
    <ValidationSummary />
    <br />
    <br /> <input type="submit" value="Изменить пароль" />
    <div> @error </div>
    </EditForm>

}
else
{
    <p><em>Loading...</em></p>
}

@code 
{
    private string? error;
    private User? _user = new();
    private ChangeUserPassword? changeUserPassword = new();
    private bool isConnected;

    private async Task ReadLocalStorage()
    {
        _user!.Name = await localStorage.GetItemAsync<string>("userName");
        _user.Id = await localStorage.GetItemAsync<int>("userId");
    }
    private async void Change()
    {
        _user = await _listUsers.GetUserById(_user!.Id);
        if (passwordEncryptor.Decrypt(_user!.Password!) == changeUserPassword!.CurrentPassword)
        {
            if (changeUserPassword.NewPassword == changeUserPassword.NewPasswordRepeat)
            {
                _user.Password = passwordEncryptor.Encrypt(changeUserPassword.NewPassword!);
                await _listUsers.UpdateUser(_user);
                logger.LogInformation("Обновление пароля пользователя {" + changeUserPassword.NewPassword+"}");
                toastService.ShowSuccess("Пароль успешно изменен"); 
                navigationManager.NavigateTo("/PasswordManager");
            }
            else
            {
                toastService.ShowError("Новые пароли не совпадают");
            }
        }
        else
        {
            toastService.ShowError("Текущий пароль неверен");
            logger.LogWarning("Введен неверный пароль для пользователя {" + _user.Name+ "}");
            changeUserPassword = new();
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            await ReadLocalStorage();
            StateHasChanged();
        }
    }
}
