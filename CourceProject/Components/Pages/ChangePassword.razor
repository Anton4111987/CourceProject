@using CourceProject.Components.Data
@using CourceProject.Components.Models
@using CourceProject.Components.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IUserRepository _listUsers
@inject Blazored.SessionStorage.ISessionStorageService localStorage;
@inject NavigationManager navigationManager
@inject IEncryptor passwordEncryptor
@inject IToastService toastService
@inject ILogger<ChangePassword> logger

@page "/ChangePassword"
@rendermode InteractiveServer

@if (isConnected)
{
    <div class="container-fluid">
        <div class="col-md-4 offset-md-4" text-align="left">
            <div class="form-container">
                <div class="form-icon"><i class="fa fa-user"></i></div>
                <h3 class="title">Изменение пароля пользователя</h3>
                <EditForm Model="@changeUserPassword" OnValidSubmit="Change" FormName="user_changePassword" class="form-horizontal">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label>Введите текущий пароль:</label>
                        <InputText type="password" @bind-Value="changeUserPassword!.CurrentPassword" class="form-control" placeholder="Текущий пароль" />
                        <br />
                    </div>
                    <div class="form-group">
                        <label>Введите новый пароль:</label>
                        <InputText type="password" @bind-Value="changeUserPassword.NewPassword" class="form-control" placeholder="Новый пароль" />
                        <br />
                    </div>
                    <div class="form-group">
                        <label> Повторите новый пароль:</label>
                        <InputText type="password" @bind-Value="changeUserPassword.NewPasswordRepeat" class="form-control" placeholder="Повторите новый пароль" />
                        <br />
                    </div>
                    <ValidationSummary />
                    <input type="submit" value="Изменить пароль" class="btn btn-default" />
                    <br />
                </EditForm>
            </div>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code 
{
    private User? _user = new();
    private ChangeUserPassword? changeUserPassword = new();
    private bool isConnected;

    private async Task ReadLocalStorage()
    {
        _user!.Name = await localStorage.GetItemAsync<string>("userName");
        _user.Id = await localStorage.GetItemAsync<int>("userId");
    }
    #region метод изменения пароля пользователя
    private async void Change() // метод изменения пароля пользователя
    {
        _user = await _listUsers.GetUserById(_user!.Id);
        if (passwordEncryptor.Decrypt(_user!.Password!) == changeUserPassword!.CurrentPassword)
        {
            if (changeUserPassword.NewPassword == changeUserPassword.NewPasswordRepeat)
            {
                _user.Password = passwordEncryptor.Encrypt(changeUserPassword.NewPassword!);
                await _listUsers.UpdateUser(_user);
                logger.LogInformation("Обновление пароля пользователя {" + changeUserPassword.NewPassword+"}");
                toastService.ShowSuccess("Пароль успешно изменен"); 
                navigationManager.NavigateTo("/PasswordManager");
            }
            else
            {
                toastService.ShowError("Новые пароли не совпадают");
            }
        }
        else
        {
            toastService.ShowError("Текущий пароль неверен");
            logger.LogWarning("Введен неверный пароль для пользователя {" + _user.Name+ "}");
            changeUserPassword = new();
        }
    }
    #endregion
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            await ReadLocalStorage();
            StateHasChanged();
        }
    }
}
