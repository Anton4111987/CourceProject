@using Blazored.Toast.Services
@using CourceProject.Components.Data
@using CourceProject.Components.Models
@using CourceProject.Components.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IUserRepository _listUsers
@inject Blazored.SessionStorage.ISessionStorageService localStorage;
@inject IEncryptor passwordEncryptor;
@inject NavigationManager navigationManager;
@inject IToastService toastService
@inject ILogger<Authorization> logger
@page "/Authorization"

@rendermode InteractiveServer

<h1>@_pageTitle</h1>


<EditForm Model="@_userAuthorization" OnValidSubmit="UserAuthorization" FormName="user_authorization" >
    <DataAnnotationsValidator />
    <br />
    <div>
        <b style="color:blueviolet; font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif">Имя пользователя: </b>
        <InputText @bind-Value="_userAuthorization.Name" />
    </div>    
    <br />
    <div>
        <b style="color:blueviolet; font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif">Пароль пользователя:  </b>
        <InputText type="password" @bind-Value="_userAuthorization.Password" />
    </div>    
    <br />
    <ValidationSummary />
    <br />
    <input class=" btn btn-primary" type="submit" value="Авторизоваться" />
    
</EditForm>

@code {
    private string _pageTitle = "Авторизация пользователя";
    private IEnumerable<User> users = new List<User>();
    private User? user;
    private int? _userId;
    private string? decryptedPassword;
    [SupplyParameterFromForm]
    private UserAthirization _userAuthorization { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        users = await _listUsers.GetUsers();
    }

    private async Task UserAuthorization()
    {
        if (_userAuthorization.Name != null && _userAuthorization.Password != null)
        {
            if (SearchUser())
            {
                _userId = user!.Id;
                user.LastLoginDate = DateTime.Now;
                await _listUsers.UpdateUser(user);
                toastService.ShowSuccess("Вы успешно авторизовались под пользователем " + _userAuthorization.Name);
                await SaveLocalStorage();
                logger.LogInformation("Сохранение имени и Id пользователя {" + _userAuthorization.Name + "} в sessionStorage при авторизации");
                navigationManager.NavigateTo("/PasswordManager");
            }
            else
            {
                toastService.ShowError("Пользователя с такими именем и паролем не найдено в бд!");
                _userAuthorization = new();
            } 
        }
        else
            toastService.ShowError("Не все поля заполнены корректно");
    }

    private async Task SaveLocalStorage()
    {
        await localStorage.SetItemAsync("userId", _userId);
        await localStorage.SetItemAsync("userName", _userAuthorization.Name);
    }
    private bool SearchUser()
    {
        _userAuthorization.Name = _userAuthorization.Name!.Trim();
        _userAuthorization.Password = _userAuthorization.Password!.Trim();
        bool flag = false;
        foreach (User userSearch in users)
        {
            if (userSearch.Password!.Length>16)
                decryptedPassword = passwordEncryptor.Decrypt(userSearch.Password);
            if (userSearch.Name == _userAuthorization.Name && userSearch.Password == _userAuthorization.Password
            || userSearch.Name == _userAuthorization.Name && decryptedPassword == _userAuthorization.Password)
            {
                user = new();                
                user = userSearch;
                // toastService.ShowInfo("Пользователь с таким именем и паролем найден в системе");
                // logger.LogInformation("Пользователь с именем {" +userSearch.Name + "} найден в системе");
                flag = true;
            }
        }
        return flag;
    }
}
