@using CourceProject.Components.Data
@using CourceProject.Components.Models

@inject IUserRepository _listUsers
@inject IConfidantRepository _listConfidants
@inject Blazored.SessionStorage.ISessionStorageService localStorage
@inject NavigationManager navigationManager
@inject IToastService toastService
@inject ILogger<Confidant> logger
@page "/Confidant"
@rendermode InteractiveServer

<h1 style="color:blueviolet; font-style:oblique" align="center">Confidant</h1>
<p style="color:blueviolet; font-style:oblique" align="center"> Список доверенных лиц </p>
<center>
    <h3>Доверенные лица служат для того чтобы получить логин и пароль пользователя если он отсутствовал в приложении более 183 дней  </h3>
    </center>

<br />
<br />
@if (isConnected)
{
    if(_userId==0)
    {// 
        toastService.ShowError("Пожалуйста авторизуйтесь!");
        navigationManager.NavigateTo("/Authorization");
    }
    else
    {
        <div class="userId" style="color:white; width:350px; background:#42AAFF">
            <span> Вы вошли под пользователем - "@_nameUser"</span>
            <br />
            <span> userId - "@_userId" </span>
        </div>
        <h1 style="color:blueviolet; font-style:oblique" align="center">Список доверенных лиц</h1>

        <br />
        <table href="/confidant#tableElement" class="table_dark">
            <thead>
                <tr>
                    <th>Фамилия</th>
                    <th>Имя</th>
                    <th>Отчество</th>
                    <th>Email адрес</th>
                    <th>Номер телефона</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (Confidant conf in confidants!)
                {
                    <tr>
                        <td>@conf.LastName</td>
                        <td>@conf.Name</td>
                        <td>@conf.SurName</td>
                        <td>@conf.Email</td>
                        <td>@conf.Number</td>
                        <td>
                            <button style="background:red" class="glow-on-hover" id="delete" @onclick="(()=>DeleteConfidant(conf))">Удалить</button>
                        </td>
                    </tr>
                }
                <tr>
                    <td>
                        <InputText @bind-Value=@_newConfidant.LastName Placeholder="Введите Фамилию" />
                    </td>
                    <td>
                        <InputText @bind-Value=@_newConfidant.Name Placeholder="Введите Имя" />
                    </td>
                    <td>
                        <InputText @bind-Value=@_newConfidant.SurName Placeholder="Введите Отчество" />
                    </td>
                    <td>
                        <InputText @bind-Value=@_newConfidant.Email Placeholder="Введите Email" />
                    </td>
                    <td>
                        <InputText  @bind-Value=@_newConfidant.Number Placeholder="Введите номер" />
                       
                    </td>
                    <td></td>
                </tr>
            </tbody>
        </table>
        <br />
        <br />
        <button style="background:blue; width:400px" class="glow-on-hover" id="add" @onclick="AddConfidant">Добавить новое доверенное лицо</button>
        <button style="background:black; float:inline-end" class="glow-on-hover" id="exit" @onclick="Exit">Выйти</button>
    }

    
}

@code 
{
    private string _pageTitle = "Вы вошли под пользователем ";
    private int? _userId;
    private string? _nameUser;
    private IEnumerable<Confidant> confidants=new List<Confidant>();
    private Confidant _newConfidant = new();
    private bool isConnected;
    protected override async Task OnInitializedAsync()
    {
        confidants = await _listConfidants.GetConfidants();
        confidants = confidants.Where(c => c.UserId == _userId);
    }

    private async void Change(Confidant confidant, int selectedNumber) // изменение данных доверенного лица
    {
        await _listConfidants.UpdateConfidant(confidant);
        logger.LogInformation("Обновлены данные доверенного лица {" + confidant.Name + " " + confidant.SurName + " " + confidant.LastName + "}");
        toastService.ShowInfo("Обновлены данные доверенного лица {" + confidant.Name + " " + confidant.SurName + " " + confidant.LastName + "}");
    }

    private async Task ReadLocalStorage()
    {
        _nameUser = await localStorage.GetItemAsync<string>("userName");
        _userId = await localStorage.GetItemAsync<int>("userId");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            await ReadLocalStorage();
            StateHasChanged();
        }
    }
    #region Метод добавления доверенного лица
    private async void AddConfidant() // Метод добавления доверенного лица
    {
        if (_newConfidant.Name != null && _newConfidant.LastName != null && _newConfidant.SurName != null && _newConfidant.Email != null && _newConfidant.Number!=null)
        {
            _newConfidant = new()
            {
                Name = _newConfidant.Name,
                LastName = _newConfidant.LastName,
                SurName = _newConfidant.SurName,
                Email = _newConfidant.Email,
                Number = _newConfidant.Number,
                UserId = _userId
            };
            await _listConfidants.AddConfidant(_newConfidant);
            logger.LogInformation("Добавлено новое доверенное лицо {" + _newConfidant.LastName + " " + _newConfidant.Name + " " + _newConfidant.SurName + "} у пользователя " + _nameUser + "  с id=" + _userId +"");
            toastService.ShowSuccess("Добавлено новое доверенное лицо {" + _newConfidant.LastName + " " + _newConfidant.Name + " " + _newConfidant.SurName + "}");
            navigationManager.NavigateTo("/Home");
            navigationManager.NavigateTo("/Confidant");
            _newConfidant = new();
        }
        else
            toastService.ShowError("Не все поля заполнены корректно");
    }
    # endregion

    #region  Метод удаление доверенного лица
    private void DeleteConfidant(Confidant confidant) //Метод удаление доверенного лица
    {
        _listConfidants.Delete(confidant);
        navigationManager.NavigateTo("/Authorization"); // переделать как-то нужно
        navigationManager.NavigateTo("/confidant");
        toastService.ShowInfo("Удалено доверенное лицо {" + confidant.LastName + " " + confidant.Name + " " + confidant.SurName + "}");
    }
    #endregion
    
    private async void Exit()
    {
        navigationManager.NavigateTo("/Authorization");
        logger.LogInformation("Выход пользователя {" + _nameUser + "} из приложения!");
        await localStorage.ClearAsync();
        logger.LogInformation("Очистка sessionStorage!");
        toastService.ShowInfo("Смена пользователя");
    }











}
